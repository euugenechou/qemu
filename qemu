#!/usr/bin/env bash

CONFIG_DIR="$HOME/.config/qemu"

function help() {
    message=(
        "USAGE:"
        "   qemu <SUBCOMMAND>"
        ""
        "OPTIONS:"
        "   -h  Print help information"
        ""
        "SUBCOMMANDS:"
        "   clone       Clone an existing virtual machine"
        "   help        Print this message or the help of the given subcommand(s)"
        "   install     Create and install a new virtual machine"
        "   list        Print the names of all installed virtual machines"
        "   remove      Uninstall a virtual machine"
        "   run         Start up a virtual machine"
        "   shutdown    Terminate a running virtual machine"
    )

    if [[ $# -gt 1 ]]; then
        subcommand=$2
        case $subcommand in
        "install")
            help_install $@
            exit 0
            ;;
        "run")
            help_run $@
            exit 0
            ;;
        "shutdown")
            help_shutdown $@
            exit 0
            ;;
        "clone")
            help_clone $@
            exit 0
            ;;
        "list")
            help_list $@
            exit 0
            ;;
        "remove")
            help_remove $@
            exit 0
            ;;
        *)
            echo "qemu: unknown subcommand: $subcommand"
            printf "%s\n" "${message[@]}"
            exit 1
            ;;
        esac
    fi

    printf "%s\n" "${message[@]}"
}

function help_install() {
    message=(
        "USAGE:"
        "   qemu install [OPTIONS] -n <NAME> -i <ISO>"
        ""
        "OPTIONS:"
        "   -c  Cores for virtual machine [default: 2]"
        "   -h  Print help information"
        "   -i  ISO to install on virtual machine"
        "   -m  Memory (gigabytes) for virtual machine [default: 2]"
        "   -n  Name of virtual machine"
        "   -s  Disk size (gigabytes) for virtual machine in [default: 32]"
    )
    printf "%s\n" "${message[@]}"
}

function help_run() {
    message=(
        "USAGE:"
        "   qemu run [OPTIONS] -n <NAME>"
        ""
        "OPTIONS:"
        "   -c  Cores for virtual machine [default: 2]"
        "   -h  Print help information"
        "   -m  Memory (gigabytes) for virtual machine [default: 2]"
        "   -n  Name of virtual machine"
        "   -p  Port to forward to [default: 8080]"
    )
    printf "%s\n" "${message[@]}"
}

function help_shutdown() {
    message=(
        "USAGE:"
        "   qemu shutdown [OPTIONS] -n <NAME>"
        ""
        "OPTIONS:"
        "   -h  Print help information"
        "   -n  Name of virtual machine"
    )
    printf "%s\n" "${message[@]}"
}

function help_clone() {
    message=(
        "USAGE:"
        "   qemu clone [OPTIONS] -s <NAME> -d <NAME>"
        ""
        "OPTIONS:"
        "   -h  Print help information"
        "   -s  Name of existing virtual machine"
        "   -d  Name of cloned virtual machine"
    )
    printf "%s\n" "${message[@]}"
}

function help_list() {
    message=(
        "USAGE:"
        "   qemu list [OPTIONS]"
        ""
        "OPTIONS:"
        "   -h  Print help information"
    )
    printf "%s\n" "${message[@]}"
}

function help_remove() {
    message=(
        "USAGE:"
        "   qemu list [OPTIONS] -n <NAME>"
        ""
        "OPTIONS:"
        "   -h  Print help information"
        "   -n  Name of virtual machine to remove"
    )
    printf "%s\n" "${message[@]}"
}

function install() {
    name=""
    iso=""
    cores=2
    memory=2
    size=32

    while getopts "n:i:c:m:s:h" opt; do
        case $opt in
        n)
            name=$CONFIG_DIR/$OPTARG.qcow2
            ;;
        i)
            iso=$OPTARG
            ;;
        c)
            cores=$OPTARG
            ;;
        m)
            memory=$OPTARG
            ;;
        s)
            size=$OPTARG
            ;;
        h)
            help_install $@
            exit 0
            ;;
        *)
            echo "qemu: unknown option: $opt"
            help_install $@
            exit 1
            ;;
        esac
    done

    if [[ -z $name ]]; then
        echo "qemu: missing name of virtual machine to create"
        exit 1
    fi

    if [[ -z $iso ]]; then
        echo "qemu: missing path to ISO to install"
        exit 1
    fi

    qemu-img create -f qcow2 $name ${size}G

    qemu-system-aarch64 \
        -M virt,highmem=off \
        -accel hvf \
        -cpu host \
        -smp $cores \
        -m ${memory}G \
        -bios $CONFIG_DIR/efi.fd \
        -device virtio-gpu-pci \
        -nographic \
        -drive file=$name,if=virtio,cache=writethrough \
        -cdrom $iso
}

function run() {
    name=""
    cores=2
    memory=2
    port=8080

    while getopts "n:c:m:p:h" opt; do
        case $opt in
        n)
            name=$CONFIG_DIR/$OPTARG.qcow2
            ;;
        c)
            cores=$OPTARG
            ;;
        m)
            memory=$OPTARG
            ;;
        p)
            port=$OPTARG
            ;;
        h)
            help_run $@
            exit 0
            ;;
        *)
            echo "qemu: unknown option: $opt"
            help_run $@
            exit 1
            ;;
        esac
    done

    if [[ -z $name ]]; then
        echo "qemu: missing name of virtual machine to run"
        exit 1
    fi

    qemu-system-aarch64 \
        -M virt,highmem=off \
        -accel hvf \
        -cpu host \
        -smp $cores \
        -m ${memory}G \
        -bios $CONFIG_DIR/efi.fd \
        -device virtio-gpu-pci \
        -nographic \
        -net user,hostfwd=tcp::$port-:22 \
        -net nic \
        -drive file=$name,if=virtio,cache=writethrough
}

function shutdown() {
    name=""

    while getopts "n:h" opt; do
        case $opt in
        n)
            name=$CONFIG_DIR/$OPTARG.qcow2
            ;;
        h)
            help_shutdown $@
            exit 0
            ;;
        *)
            echo "qemu: unknown option: $opt"
            help_shutdown $@
            exit 1
            ;;
        esac
    done

    if [[ -z $name ]]; then
        echo "qemu: missing name of virtual machine to shutdown"
        exit 1
    fi

    kill $(ps aux | egrep ".*qemu-system-aarch64.*$name.*" | egrep -v egrep | awk '{ print $2 }')
}

function clone() {
    src=""
    dst=""
    src_name=""
    dst_name=""

    while getopts "s:d:h" opt; do
        case $opt in
        s)
            src_name=$OPTARG
            src=$CONFIG_DIR/$OPTARG.qcow2
            ;;
        d)
            dst_name=$OPTARG
            dst=$CONFIG_DIR/$OPTARG.qcow2
            ;;
        h)
            help_clone $@
            exit 0
            ;;
        *)
            echo "qemu: unknown option: $opt"
            help_clone $@
            exit 1
            ;;
        esac
    done

    if [[ -z $src ]]; then
        echo "qemu: missing name of existing virtual machine"
        exit 1
    fi

    if [[ -z $dst ]]; then
        echo "qemu: missing name of cloned virtual machine"
        exit 1
    fi

    echo -n "qemu: cloning $src_name to $dst_name... "
    cp $src $dst
    echo "done."
}

function list() {
    while getopts "h" opt; do
        case $opt in
        h)
            help_list $@
            exit 0
            ;;
        *)
            echo "qemu: unknown option: $opt"
            help_list $@
            exit 1
            ;;
        esac
    done

    for vm in $CONFIG_DIR/*.qcow2; do
        name=$(basename $vm)
        echo ${name%.*}
    done
}

function remove() {
    name=""

    while getopts "n:h" opt; do
        case $opt in
        n)
            name=$CONFIG_DIR/$OPTARG.qcow2
            ;;
        h)
            help_remove $@
            exit 0
            ;;
        *)
            echo "qemu: unknown option: $opt"
            help_remove $@
            exit 1
            ;;
        esac
    done

    if [[ -z $name ]]; then
        echo "qemu: missing name of virtual machine to remove"
        exit 1
    fi

    if [[ ! -f $name ]]; then
        echo "qemu: virtual machine does not exist"
        exit 1
    fi

    echo -n "qemu: removing virtual machine... "
    rm -f $name
    echo "done."
}

if [[ ! -d $CONFIG_DIR ]]; then
    echo -n "qemu: missing config directory, creating... "
    mkdir -p $CONFIG_DIR
    echo "done."
    exit 0
fi

subcommand=$1
case $subcommand in
"" | "-h" | "help")
    help $@
    ;;
"install")
    shift
    install $@
    ;;
"run")
    shift
    run $@
    ;;
"shutdown")
    shift
    shutdown $@
    ;;
"clone")
    shift
    clone $@
    ;;
"list")
    shift
    list $@
    ;;
"remove")
    shift
    remove $@
    ;;
*)
    echo "qemu: unknown subcommand: $subcommand"
    help
    exit 1
    ;;
esac
